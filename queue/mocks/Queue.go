// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	task "url-crawler/task"
)

// Queue is an autogenerated mock type for the Queue type
type Queue struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *Queue) Add(_a0 task.Task) {
	_m.Called(_a0)
}

// Close provides a mock function with given fields:
func (_m *Queue) Close() {
	_m.Called()
}

// Get provides a mock function with given fields:
func (_m *Queue) Get() task.Task {
	ret := _m.Called()

	var r0 task.Task
	if rf, ok := ret.Get(0).(func() task.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(task.Task)
		}
	}

	return r0
}

// IsEmpty provides a mock function with given fields:
func (_m *Queue) IsEmpty() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Size provides a mock function with given fields:
func (_m *Queue) Size() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// NewQueue creates a new instance of Queue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *Queue {
	mock := &Queue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
